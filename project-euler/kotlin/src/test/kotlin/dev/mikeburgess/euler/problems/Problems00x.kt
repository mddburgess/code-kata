package dev.mikeburgess.euler.problems

import dev.mikeburgess.euler.extensions.isEven
import dev.mikeburgess.euler.sequences.fibonacciSequence
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class Problems00x {

    /**
     * Problem 1
     *
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
     * and 9. The sum of these multiples is 23.
     *
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    @Test
    fun `Problem 1`() {
        val result = (1 until 1000L)
            .filter { it % 3 == 0L || it % 5 == 0L }
            .sum()

        assertThat(result).isEqualTo(233168L)
    }

    /**
     * Problem 2
     *
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
     * starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */
    @Test
    fun `Problem 2`() {
        val result = fibonacciSequence()
            .takeWhile { it < 4_000_000 }
            .filter { it.isEven() }
            .sum()

        assertThat(result).isEqualTo(4613732L)
    }

    /**
     * Problem 3
     *
     * The prime factors of 13195 are 5, 7, 13 and 29.
     *
     * What is the largest prime factor of the number 600851475143?
     */
    @Test
    fun `Problem 3`() {
        var number = 600_851_475_143
        var factor = 2L
        while (factor < number) {
            when {
                number % factor == 0L -> number /= factor
                else -> factor++
            }
        }

        assertThat(factor).isEqualTo(6857L)
    }
}
